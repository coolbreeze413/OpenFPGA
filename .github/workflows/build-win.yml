name: 'build-win'

on:
  push:

jobs:
  
  msys2-windows-2022:

    runs-on: windows-2022

    defaults:
      run:
        shell: msys2 {0}
        #shell: C:\msys64\msys2_shell.cmd -mingw64 -defterm -here -no-start {0}

    steps:

    - name: Cancel previous
      uses: styfle/cancel-workflow-action@0.12.1
      with:
        access_token: ${{ github.token }}

    - name: Checkout repo
      uses: actions/checkout@v4.1.1
      with:
        submodules: recursive
        fetch-depth: 0

    - name: Setup MSYS2
      uses: msys2/setup-msys2@v2
      with:
        msystem: MINGW64
        path-type: minimal
        update: true
        release: false
        install: >-
          base-devel
          git
          wget
          mingw-w64-x86_64-toolchain
          mingw-w64-x86_64-cmake
          mingw-w64-x86_64-tcl
          mingw-w64-x86_64-zlib
          mingw-w64-x86_64-swig
          mingw-w64-x86_64-python

    - name: Show shell configuration
      run: |
        which git && git --version || true
        which cmake && cmake --version || true
        which make && make --version || true
        which python && python --version || true
        which ninja && ninja --version || true
        which tclsh && echo 'puts [info patchlevel];exit 0' | tclsh || true

    - name: Dump GitHub context
      env:
        GITHUB_CONTEXT: ${{ toJson(github) }}
      run: echo "$GITHUB_CONTEXT"

    - name: Print Repo HEAD
      run: |
        echo && echo "git last log" && git log -1

    # https://sourceforge.net/p/mingw/mailman/message/5690922/
    # https://github.com/capnproto/capnproto/issues/1458
    - name: Build
      run: |
        export SOURCE_DIR=${PWD}
        which gcc
        which g++
        mkdir -p build
        printf "\n\n hotfixes...\n"
        find ./vtr-verilog-to-routing/libs/libvtrutil/src/vtr_util.cpp -type f -exec sed -i 's-getdelim(-0;//-g' {} \;
        find ./vtr-verilog-to-routing/libs/EXTERNAL/capnproto/c++/src/kj/test-helpers.c++ -type f -exec sed -i 's-needle.size()};-needle.end()};-g' {} \;
        find ./vtr-verilog-to-routing/libs/EXTERNAL/capnproto/c++/ekam-provider/canonical/kj/test-helpers.c++ -type f -exec sed -i 's-needle.size()};-needle.end()};-g' {} \;
        find ./vtr-verilog-to-routing/libs/EXTERNAL/capnproto/c++/ekam-provider/c++header/kj/test-helpers.c++ -type f -exec sed -i 's-needle.size()};-needle.end()};-g' {} \;
        export CMAKE_SOURCE_DIR_W=$(cygpath -w "${PWD}" | sed 's;\\;/;g')
        echo "${CMAKE_SOURCE_DIR_W}"
        export MSYS2_ARG_CONV_EXCL="../EXTERNAL/capnproto/c++/src/capnp/capnp.exe;${CMAKE_SOURCE_DIR_W}/build/vtr-verilog-to-routing/libs/EXTERNAL/capnproto/c++/src/capnp/capnpc-c++.exe:."
        echo "${MSYS2_ARG_CONV_EXCL}"
        export OPENFPGA_INSTALL_DIR=${PWD}/install
        printf "\n\n cmake configure...\n"
        cmake -G "MSYS Makefiles" -DCMAKE_INSTALL_PREFIX=${OPENFPGA_INSTALL_DIR} -DOPENFPGA_WITH_YOSYS=OFF -DOPENFPGA_WITH_YOSYS_PLUGIN=OFF -DOPENFPGA_WITH_TEST=OFF -DOPENFPGA_WITH_VERSION=OFF -DOPENFPGA_WITH_SWIG=OFF -DWITH_ABC=OFF  -DHAVE_STRUCT_TIMESPEC=1 -DABC_USE_STDINT_H=1 -S ${PWD} -B ${PWD}/build
        printf "\n\n build and install...\n"
        make install -C build -j$(nproc)
        printf "\n\n create package dir...\n"
        export OPENFPGA_PACKAGE_DIR=${PWD}/package
        mkdir -p ${OPENFPGA_PACKAGE_DIR}/bin
        cp ${OPENFPGA_INSTALL_DIR}/bin/* ${OPENFPGA_PACKAGE_DIR}/bin/
        printf "\n\n copy mingw dependency libs...\n"
        for f in `ldd ${OPENFPGA_PACKAGE_DIR}/bin/vpr.exe | cut -d' ' -f 3 | grep mingw | uniq`; do cp -fv ${f} ${OPENFPGA_PACKAGE_DIR}/bin; done
        for f in `ldd ${OPENFPGA_PACKAGE_DIR}/bin/openfpga.exe | cut -d' ' -f 3 | grep mingw | uniq`; do cp -fv ${f} ${OPENFPGA_PACKAGE_DIR}/bin; done
        printf "\n\n 7zip setup...\n"
        export 7ZIP_BASE_DIR_PATH=${PWD}/7zip
        mkdir -p ${7ZIP_BASE_DIR_PATH}
        export 7ZIP_DIR_PATH=${7ZIP_BASE_DIR_PATH}/7z2201-x64
        export 7ZIP_FILE_PATH=${7ZIP_DIR_PATH}/7z.exe
        export 7ZIP_SFX_FILE_PATH_WIN := $(cygpath -w "${7ZIP_DIR_PATH}/7z.sfx" | sed 's/\\/\\\\/g')
        wget --quiet https://www.7-zip.org/a/7zr.exe --directory-prefix=${7ZIP_BASE_DIR_PATH}
        wget --quiet https://www.7-zip.org/a/7z2201-x64.exe --directory-prefix=${7ZIP_BASE_DIR_PATH}
        cd ${7ZIP_BASE_DIR_PATH}
        7zr.exe x 7z2201-x64.exe -y > /dev/null
        cd -
        printf "\n\n create packages...\n"
        cd ${OPENFPGA_PACKAGE_DIR}
        ${7ZIP_FILE_PATH} a -mmt -mx3 -sfx${7ZIP_SFX_FILE_PATH_WIN} openfpga.sfx.exe * > /dev/null
        mv openfpga.sfx.exe ${SOURCE_DIR}/
        ${7ZIP_FILE_PATH} a -tzip openfpga.7z * > /dev/null
        mv openfpga.7z ${SOURCE_DIR}/
        cd -

    - name: Upload OpenFPGA binaries
      uses: actions/upload-artifact@v4.3.0
      if: ${{ success() }}
      with:
        name: openfpga_build
        retention-days: 3
        path: |
          openfpga.7z
          openfpga.sfx.exe
